// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb" // PROD
  // provider = "postgresql" // DEV
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String?
  role     String  @default("normal")

  store_comments   StoreComment[]
  created_stores   Store[]         @relation("created_user")
  updated_stores   Store[]         @relation("updated_user")
  created_menus    Menu[]          @relation("created_user")
  updated_menus    Menu[]          @relation("updated_user")
  user_ips         UserIp[]
  user_store_goods UserStoreGood[]
  user_store_bads  UserStoreBad[]

  @@map("users")
}

model UserIp {
  user_id    String
  ip         String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@id([user_id, ip])
  @@map("user_ips")
}

model Store {
  id              String   @id @default(cuid())
  name            String
  address         String
  description     String
  created_user_id String
  updated_user_id String
  deleted         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  created_user    User           @relation("created_user", fields: [created_user_id], references: [id])
  updated_user    User           @relation("updated_user", fields: [updated_user_id], references: [id])
  store_commentss StoreComment[]
  menu            Menu[]

  @@map("stores")
}

model StoreHistory {
  id              String   @id @default(cuid())
  name            String
  store_id        String
  address         String
  description     String
  updated_user_id String
  deleted         Boolean  @default(false)
  created_at      DateTime @default(now())

  @@map("store_histories")
}

model UserStoreGood {
  user_id    String   @id
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("user_store_goods")
}

model UserStoreBad {
  user_id    String   @id
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("user_store_bads")
}

model Menu {
  id              String   @id @default(cuid())
  name            String
  store_id        String
  description     String
  deleted         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
  created_user_id String
  updated_user_id String

  menu_allergens MenuAllergen[]
  store          Store          @relation(fields: [store_id], references: [id])
  created_user   User           @relation("created_user", fields: [created_user_id], references: [id])
  updated_user   User           @relation("updated_user", fields: [updated_user_id], references: [id])

  @@map("menus")
}

model MenuHistory {
  id              String   @id @default(cuid())
  name            String
  menu_id         String
  store_id        String
  description     String
  deleted         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_user_id String

  menu_allergen_histories MenuAllergenHistory[]

  @@map("menu_histories")
}

model StoreComment {
  id         String   @id @default(cuid())
  title      String
  store_id   String
  user_id    String
  content    String
  deleted    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  store Store @relation(fields: [store_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@map("store_comments")
}

model Allergen {
  id   String @id
  name String

  menu_allergens MenuAllergen[]

  @@map("allergens")
}

model MenuAllergen {
  allergen_id String
  menu_id     String

  allergen Allergen @relation(fields: [allergen_id], references: [id])
  menu     Menu     @relation(fields: [menu_id], references: [id])

  @@id([allergen_id, menu_id])
  @@map("menu_allergens")
}

model MenuAllergenHistory {
  id              String   @id @default(cuid())
  menu_history_id String
  allergen_id     String
  menu_id         String
  created_at      DateTime @default(now())

  menu_histories MenuHistory @relation(fields: [menu_history_id], references: [id])

  @@map("menu_allergen_histories")
}
